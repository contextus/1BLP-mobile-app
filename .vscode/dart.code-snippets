// Workspace-specific code snippets
{
	"View Model Property with Name": {
		"prefix": "vmpropn",
		"body": [
			"$type _$prop;",
			"$type get $prop => _$prop;",
			"set $prop($type value) {",
			"\tif (_$prop != value) {",
			"\t_$prop = value;",
			"\tnotifyListeners('${prop}');",
			"\t}",
			"}",
		],
		"description": "Creates a view model property with a getter/setter. The change notifies any callbacks passing the name of the property."
	},
	"Check for null parameter using if": {
		"prefix": "cnullif",
		"body": [
			"if($param == null) throw ArgumentError.notNull('$param');",
		]
	},
	"Check for null parameter using ArugmentError.checkNotNull": {
		"prefix": "cnull",
		"body": [
			"ArgumentError.checkNotNull($param, '$param');",
		]
	},
	"Stateful View": {
		"prefix": "stflv",
		"body": [
			"class $ViewName extends StatefulWidget {",
			"  ${ViewName}({Key key}) : super(key: key);",
			"",
			"  @override",
			"  _${ViewName}State createState() => _${ViewName}State();",
			"}",
			"",
			"class _${ViewName}State extends ViewStateBase<${ViewName}, ${ViewModelName}> {",
			"  @override",
			"  Widget buildView(BuildContext context) {",
			"    return Scaffold(",
			"      appBar: AppBar(",
			"        title: Text('${ViewName}'),",
			"      ),",
			"    );",
			"  }",
			"}"
		]
	},
	"Stateless View": {
		"prefix": "stlsv",
		"body": [
			"class ${ViewName} extends ViewBase<${ViewModelName}> {",
			"  ${ViewName}({Key key}) : super(key: key);",
			"",
			"  @override",
			"  Widget buildView(BuildContext context, ${ViewModelName} viewModel) {",
			"    return Scaffold(",
			"      appBar: AppBar(",
			"        title: Text('${ViewName}'),",
			"      ),",
			"    );",
			"  }",
			"}"
		]
	},
	"Concrete/abstract class": {
		"prefix": "cac",
		"body": [
			"abstract class $className {}",
			"",
			"class ${className}Impl implements $className {}",
		],
		"description": "Creates an abstract class and a class to implement it"
	}
}