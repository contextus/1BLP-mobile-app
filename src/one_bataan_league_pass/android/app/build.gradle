def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// Find the `keystore.keystore` and `keystore.properties` files in
// Azure DevOps server. The files should be uploaded using
// the task `Download Secure File`.
def keyStoreProperties = new Properties()
def keyStorePropertiesFilePath = System.getenv("AGENT_TEMPDIRECTORY") + "/" + "1BLP Keystore.properties"
def keyStorePropertiesFile = file(keyStorePropertiesFilePath)
def keyStoreFilePath = System.getenv("AGENT_TEMPDIRECTORY") + "/" + "1BLP Keystore.keystore"
def keyStoreFile = file(keyStoreFilePath)
def canSignWithKeyStore = keyStoreFile.exists() && keyStorePropertiesFile.exists()
if (canSignWithKeyStore) {
    keyStoreProperties.load(new FileInputStream(keyStorePropertiesFile))
}


android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.contextus.one_bataan_league_pass"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        if(canSignWithKeyStore) {
            println 'Signing APK using provided keystore.'
            releaseAzure {
                storeFile keyStoreFile
                keyAlias keyStoreProperties['keyAlias']
                keyPassword keyStoreProperties['keyPassword']
                storePassword keyStoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            if (canSignWithKeyStore) {
                signingConfig signingConfigs.releaseAzure
            } else {
                signingConfig signingConfigs.debug
            }
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android.pro'
        }
        debug {
            debuggable true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
